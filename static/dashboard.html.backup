<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rover Dashboard - Learning Platform</title>
    <link rel="stylesheet" href="/static/main.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --sidebar-width: 280px;
            --header-height: 70px;
            --primary-bg: #0a0a0a;
            --secondary-bg: #121212;
            --card-bg: #1a1a1a;
            --border-color: rgba(255, 255, 255, 0.08);
            --hover-bg: rgba(255, 255, 255, 0.05);
            --mclaren-orange: #FF8000;
            --orange-glow: rgba(255, 128, 0, 0.2);
            --text-primary: #ffffff;
            --text-secondary: #a0a0a0;
            --text-muted: #6b6b6b;
            --success: #10b981;
            --info: #3b82f6;
            --warning: #f59e0b;
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.3);
            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.4);
            --shadow-lg: 0 10px 40px rgba(0, 0, 0, 0.5);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Inter', sans-serif;
            background: var(--primary-bg);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* ==========================================
           MODERN SIDEBAR NAVIGATION
        ========================================== */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: var(--sidebar-width);
            height: 100vh;
            background: linear-gradient(180deg, #0d0d0d 0%, #0a0a0a 100%);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            z-index: 1000;
            transition: var(--transition);
        }

        .sidebar-logo {
            height: var(--header-height);
            display: flex;
            align-items: center;
            padding: 0 24px;
            border-bottom: 1px solid var(--border-color);
            background: rgba(255, 128, 0, 0.03);
        }

        .logo-content {
            display: flex;
            align-items: center;
            gap: 12px;
            cursor: pointer;
            transition: var(--transition);
        }

        .logo-content:hover {
            transform: translateX(4px);
        }

        .logo-icon {
            width: 36px;
            height: 36px;
            background: linear-gradient(135deg, var(--mclaren-orange) 0%, #ff9933 100%);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 800;
            font-size: 18px;
            box-shadow: 0 4px 12px var(--orange-glow);
        }

        .logo-text {
            font-size: 20px;
            font-weight: 700;
            letter-spacing: -0.5px;
        }

        .logo-text .suffix {
            color: var(--mclaren-orange);
            font-weight: 800;
        }

        .sidebar-nav {
            flex: 1;
            overflow-y: auto;
            padding: 20px 16px;
        }

        .sidebar-nav::-webkit-scrollbar {
            width: 6px;
        }

        .sidebar-nav::-webkit-scrollbar-track {
            background: transparent;
        }

        .sidebar-nav::-webkit-scrollbar-thumb {
            background: rgba(255, 128, 0, 0.3);
            border-radius: 3px;
        }

        .nav-section {
            margin-bottom: 24px;
        }

        .nav-section-title {
            font-size: 11px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: var(--text-muted);
            padding: 8px 12px;
            margin-bottom: 4px;
        }

        .nav-category {
            margin-bottom: 8px;
        }

        .category-button {
            width: 100%;
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            background: transparent;
            border: 1px solid transparent;
            border-radius: 8px;
            color: var(--text-secondary);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .category-button::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            width: 3px;
            height: 100%;
            background: var(--mclaren-orange);
            transform: scaleY(0);
            transition: var(--transition);
        }

        .category-button:hover {
            background: var(--hover-bg);
            color: var(--text-primary);
            border-color: var(--border-color);
            transform: translateX(4px);
        }

        .category-button.active {
            background: rgba(255, 128, 0, 0.1);
            color: var(--mclaren-orange);
            border-color: rgba(255, 128, 0, 0.3);
        }

        .category-button.active::before {
            transform: scaleY(1);
        }

        .category-icon {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .category-icon svg {
            width: 100%;
            height: 100%;
        }

        .category-name {
            flex: 1;
            text-align: left;
        }

        .category-count {
            font-size: 12px;
            font-weight: 600;
            padding: 2px 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            color: var(--text-muted);
            transition: var(--transition);
        }

        .category-button:hover .category-count,
        .category-button.active .category-count {
            background: rgba(255, 128, 0, 0.2);
            color: var(--mclaren-orange);
        }

        .category-chevron {
            width: 16px;
            height: 16px;
            transition: transform 0.3s ease;
        }

        .category-button.expanded .category-chevron {
            transform: rotate(90deg);
        }

        .category-items {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            margin-left: 32px;
            margin-top: 4px;
        }

        .category-items.expanded {
            max-height: 1000px;
        }

        .category-item {
            padding: 8px 12px;
            color: var(--text-secondary);
            font-size: 13px;
            cursor: pointer;
            border-radius: 6px;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 2px;
        }

        .category-item::before {
            content: '';
            width: 4px;
            height: 4px;
            background: var(--text-muted);
            border-radius: 50%;
            transition: var(--transition);
        }

        .category-item:hover {
            background: var(--hover-bg);
            color: var(--mclaren-orange);
            transform: translateX(4px);
        }

        .category-item:hover::before {
            background: var(--mclaren-orange);
            transform: scale(1.5);
        }

        .sidebar-footer {
            padding: 20px;
            border-top: 1px solid var(--border-color);
            background: rgba(255, 128, 0, 0.02);
        }

        .footer-stats {
            display: flex;
            gap: 12px;
        }

        .footer-stat {
            flex: 1;
            text-align: center;
        }

        .footer-stat-value {
            font-size: 18px;
            font-weight: 700;
            color: var(--mclaren-orange);
            display: block;
        }

        .footer-stat-label {
            font-size: 10px;
            color: var(--text-muted);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* ==========================================
           MAIN CONTENT AREA
        ========================================== */
        .main-container {
            margin-left: var(--sidebar-width);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .top-header {
            height: var(--header-height);
            background: rgba(10, 10, 10, 0.8);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 32px;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--text-secondary);
            font-size: 14px;
        }

        .breadcrumb-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .breadcrumb-separator {
            color: var(--text-muted);
        }

        .search-bar {
            display: flex;
            align-items: center;
            gap: 12px;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 8px 16px;
            min-width: 300px;
            transition: var(--transition);
        }

        .search-bar:focus-within {
            border-color: var(--mclaren-orange);
            box-shadow: 0 0 0 3px var(--orange-glow);
        }

        .search-bar svg {
            width: 18px;
            height: 18px;
            color: var(--text-muted);
        }

        .search-bar input {
            flex: 1;
            background: transparent;
            border: none;
            outline: none;
            color: var(--text-primary);
            font-size: 14px;
        }

        .search-bar input::placeholder {
            color: var(--text-muted);
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .header-action {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
        }

        .header-action:hover {
            background: var(--hover-bg);
            border-color: var(--mclaren-orange);
        }

        .header-action svg {
            width: 18px;
            height: 18px;
        }

        .notification-badge {
            position: absolute;
            top: -4px;
            right: -4px;
            width: 18px;
            height: 18px;
            background: var(--mclaren-orange);
            border-radius: 50%;
            font-size: 10px;
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid var(--primary-bg);
        }

        /* ==========================================
           DASHBOARD CONTENT
        ========================================== */
        .dashboard-content {
            flex: 1;
            padding: 32px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
            animation: fadeInUp 0.6s ease;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .stat-card {
            background: linear-gradient(135deg, var(--card-bg) 0%, rgba(26, 26, 26, 0.8) 100%);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 24px;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--orange-glow) 0%, transparent 100%);
            opacity: 0;
            transition: var(--transition);
        }

        .stat-card:hover {
            transform: translateY(-4px);
            border-color: var(--mclaren-orange);
            box-shadow: var(--shadow-lg);
        }

        .stat-card:hover::before {
            opacity: 1;
        }

        .stat-card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 16px;
            position: relative;
            z-index: 1;
        }

        .stat-label {
            font-size: 13px;
            font-weight: 600;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 128, 0, 0.1);
            border-radius: 8px;
            color: var(--mclaren-orange);
        }

        .stat-icon svg {
            width: 20px;
            height: 20px;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 800;
            color: var(--text-primary);
            line-height: 1;
            margin-bottom: 8px;
            position: relative;
            z-index: 1;
        }

        .stat-change {
            font-size: 13px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 4px;
            position: relative;
            z-index: 1;
        }

        .stat-change.positive {
            color: var(--success);
        }

        .stat-change.neutral {
            color: var(--info);
        }

        /* ==========================================
           KANBAN BOARD
        ========================================== */
        .kanban-container {
            animation: fadeInUp 0.8s ease 0.2s both;
        }

        .kanban-header {
            margin-bottom: 24px;
        }

        .kanban-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
        }

        .kanban-subtitle {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .kanban-board {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
            gap: 24px;
            align-items: start;
        }

        .kanban-column {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            overflow: hidden;
            transition: var(--transition);
        }

        .kanban-column:hover {
            box-shadow: var(--shadow-md);
        }

        .kanban-column-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: rgba(255, 255, 255, 0.02);
        }

        .column-title-wrapper {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .column-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% {
                opacity: 1;
                transform: scale(1);
            }
            50% {
                opacity: 0.5;
                transform: scale(1.2);
            }
        }

        .column-indicator.orange {
            background: var(--mclaren-orange);
            box-shadow: 0 0 10px var(--orange-glow);
        }

        .column-indicator.blue {
            background: var(--info);
            box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
        }

        .column-indicator.green {
            background: var(--success);
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.3);
        }

        .column-title {
            font-size: 16px;
            font-weight: 700;
        }

        .column-count {
            font-size: 13px;
            font-weight: 600;
            padding: 4px 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            color: var(--text-muted);
        }

        .kanban-cards {
            padding: 16px;
            max-height: 600px;
            overflow-y: auto;
        }

        .kanban-cards::-webkit-scrollbar {
            width: 6px;
        }

        .kanban-cards::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .kanban-card {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: var(--transition);
        }

        .kanban-card:hover {
            background: rgba(255, 255, 255, 0.05);
            border-color: var(--mclaren-orange);
            transform: translateY(-2px);
        }

        .card-title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--text-primary);
        }

        .card-meta {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 12px;
            color: var(--text-muted);
        }

        .card-meta-item {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .card-tag {
            display: inline-block;
            padding: 4px 8px;
            background: rgba(255, 128, 0, 0.1);
            color: var(--mclaren-orange);
            border-radius: 4px;
            font-size: 11px;
            font-weight: 600;
            margin-top: 8px;
        }

        /* ==========================================
           MOBILE RESPONSIVE
        ========================================== */
        @media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.mobile-open {
                transform: translateX(0);
            }

            .main-container {
                margin-left: 0;
            }

            .search-bar {
                min-width: 200px;
            }

            .kanban-board {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .dashboard-content {
                padding: 20px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .top-header {
                padding: 0 20px;
            }

            .search-bar {
                display: none;
            }

            .breadcrumb {
                display: none;
            }
        }

        /* Mobile Menu Toggle */
        .mobile-toggle {
            display: none;
            width: 36px;
            height: 36px;
            flex-direction: column;
            justify-content: center;
            gap: 6px;
            cursor: pointer;
        }

        .mobile-toggle span {
            width: 100%;
            height: 2px;
            background: var(--text-primary);
            transition: var(--transition);
        }

        @media (max-width: 1024px) {
            .mobile-toggle {
                display: flex;
            }
        }

        .overlay {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(4px);
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
            z-index: 999;
        }

        .overlay.active {
            opacity: 1;
            pointer-events: all;
        }
    </style>
</head>
<body>
    <!-- Overlay for mobile menu -->
    <div class="overlay" id="overlay"></div>

    <!-- Modern Sidebar Navigation -->
    <aside class="sidebar" id="sidebar">
        <div class="sidebar-logo" onclick="window.location.href='/'">
            <div class="logo-content">
                <div class="logo-icon">R</div>
                <div class="logo-text">ROVER<span class="suffix">.DSA</span></div>
            </div>
        </div>

        <nav class="sidebar-nav" id="sidebar-navigation">
            <div class="nav-section">
                <div class="nav-section-title">Learning Paths</div>
                <div id="nav-categories">
                    <!-- Will be populated by JavaScript -->
                </div>
            </div>
        </nav>

        <div class="sidebar-footer">
            <div class="footer-stats">
                <div class="footer-stat">
                    <span class="footer-stat-value" id="footer-categories">0</span>
                    <span class="footer-stat-label">Topics</span>
                </div>
                <div class="footer-stat">
                    <span class="footer-stat-value" id="footer-resources">0</span>
                    <span class="footer-stat-label">Resources</span>
                </div>
            </div>
        </div>
    </aside>

    <!-- Main Content Container -->
    <div class="main-container">
        <!-- Top Header Bar -->
        <header class="top-header">
            <div class="header-left">
                <div class="mobile-toggle" id="mobile-toggle">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <div class="breadcrumb">
                    <div class="breadcrumb-item">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                        </svg>
                        <span>Dashboard</span>
                    </div>
                    <span class="breadcrumb-separator">/</span>
                    <div class="breadcrumb-item">
                        <span id="breadcrumb-current">Overview</span>
                    </div>
                </div>
                <div class="search-bar">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="11" cy="11" r="8"/>
                        <path d="m21 21-4.35-4.35"/>
                    </svg>
                    <input type="text" placeholder="Search topics, resources..." id="search-input">
                </div>
            </div>
            <div class="header-right">
                <div class="header-action" title="Notifications">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/>
                        <path d="M13.73 21a2 2 0 0 1-3.46 0"/>
                    </svg>
                    <span class="notification-badge" id="notification-count">3</span>
                </div>
                <div class="header-action" title="Settings">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="3"/>
                        <path d="M12 1v6m0 6v6"/>
                        <path d="m21 12-6-6m-6 6-6-6"/>
                    </svg>
                </div>
                <div class="header-action" title="GitHub" onclick="window.open('https://github.com/purple-claw/Rover', '_blank')">
                    <svg viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.865 8.17 6.839 9.49.5.092.682-.217.682-.482 0-.237-.008-.866-.013-1.7-2.782.603-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.463-1.11-1.463-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.087 2.91.831.092-.646.35-1.086.636-1.336-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.203 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48C19.135 20.165 22 16.418 22 12c0-5.523-4.477-10-10-10z"/>
                    </svg>
                </div>
            </div>
        </header>

        <!-- Dashboard Content -->
        <main class="dashboard-content">
            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-card-header">
                        <span class="stat-label">Total Topics</span>
                        <div class="stat-icon">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"/>
                            </svg>
                        </div>
                    </div>
                    <div class="stat-value" id="stat-categories">0</div>
                    <div class="stat-change positive">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="18 15 12 9 6 15"/>
                        </svg>
                        <span>Active Learning Paths</span>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-card-header">
                        <span class="stat-label">Resources</span>
                        <div class="stat-icon">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                                <polyline points="14 2 14 8 20 8"/>
                            </svg>
                        </div>
                    </div>
                    <div class="stat-value" id="stat-resources">0</div>
                    <div class="stat-change neutral">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"/>
                            <polyline points="12 6 12 12 16 14"/>
                        </svg>
                        <span>Ready to Learn</span>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-card-header">
                        <span class="stat-label">Availability</span>
                        <div class="stat-icon">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="10"/>
                                <polyline points="16 12 12 8 8 12"/>
                                <line x1="12" y1="16" x2="12" y2="8"/>
                            </svg>
                        </div>
                    </div>
                    <div class="stat-value">24/7</div>
                    <div class="stat-change positive">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/>
                        </svg>
                        <span>Always Online</span>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-card-header">
                        <span class="stat-label">Platform</span>
                        <div class="stat-icon">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
                            </svg>
                        </div>
                    </div>
                    <div class="stat-value">Free</div>
                    <div class="stat-change positive">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="20 6 9 17 4 12"/>
                        </svg>
                        <span>Open Source</span>
                    </div>
                </div>
            </div>

            <!-- Kanban Board -->
            <div class="kanban-container">
                <div class="kanban-header">
                    <h2 class="kanban-title">Learning Resources</h2>
                    <p class="kanban-subtitle">Browse and access your DSA learning materials</p>
                </div>
                <div class="kanban-board" id="kanban-board">
                    <!-- Kanban columns will be populated by JavaScript -->
                </div>
            </div>
        </main>
    </div>

    <script src="/static/index.js"></script>
    <script>
        // ==========================================
        // GLOBAL STATE
        // ==========================================
        let navigationData = null;
        let activeCategory = null;

        // ==========================================
        // MOBILE MENU TOGGLE
        // ==========================================
        const mobileToggle = document.getElementById('mobile-toggle');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');

        mobileToggle.addEventListener('click', () => {
            sidebar.classList.toggle('mobile-open');
            overlay.classList.toggle('active');
        });

        overlay.addEventListener('click', () => {
            sidebar.classList.remove('mobile-open');
            overlay.classList.remove('active');
        });

        // ==========================================
        // SEARCH FUNCTIONALITY
        // ==========================================
        const searchInput = document.getElementById('search-input');
        let searchTimeout;

        searchInput.addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const query = e.target.value.toLowerCase();
                if (query) {
                    filterContent(query);
                } else {
                    renderKanbanBoard(navigationData);
                }
            }, 300);
        });

        function filterContent(query) {
            if (!navigationData) return;
            
            const filtered = navigationData.map(category => {
                const matchingFiles = getAllFiles(category).filter(file => 
                    file.name.toLowerCase().includes(query)
                );
                return { ...category, filteredFiles: matchingFiles };
            }).filter(category => category.filteredFiles.length > 0);
            
            renderKanbanBoard(filtered, true);
        }

        // ==========================================
        // LOAD NAVIGATION DATA
        // ==========================================
        async function loadNavigation() {
            try {
                const response = await fetch('/api/navigation');
                const data = await response.json();
                
                if (data.navigation) {
                    navigationData = data.navigation;
                    
                    // Update all stats
                    const totalCategories = data.navigation.length;
                    const totalResources = countTotalFiles(data.navigation);
                    
                    document.getElementById('stat-categories').textContent = totalCategories;
                    document.getElementById('stat-resources').textContent = totalResources;
                    document.getElementById('footer-categories').textContent = totalCategories;
                    document.getElementById('footer-resources').textContent = totalResources;
                    
                    // Render sidebar navigation
                    renderSidebarNavigation(data.navigation);
                    
                    // Render kanban board
                    renderKanbanBoard(data.navigation);
                }
            } catch (error) {
                console.error('Error loading navigation:', error);
                showError();
            }
        }

        // ==========================================
        // RENDER SIDEBAR NAVIGATION
        // ==========================================
        function renderSidebarNavigation(items) {
            const navCategories = document.getElementById('nav-categories');
            
            const iconMap = {
                'Complexity': '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/></svg>',
                'Problem Solving': '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/></svg>',
                'Sliding Window': '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18" rx="2"/><line x1="9" y1="3" x2="9" y2="21"/></svg>',
                'Test': '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/><polyline points="14 2 14 8 20 8"/><line x1="16" y1="13" x2="8" y2="13"/><line x1="16" y1="17" x2="8" y2="17"/><polyline points="10 9 9 9 8 9"/></svg>'
            };
            
            let html = '';
            
            items.forEach((item, index) => {
                if (item.type === 'folder') {
                    const fileCount = countTotalFiles([item]);
                    const icon = iconMap[item.name] || '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"/></svg>';
                    
                    html += `
                        <div class="nav-category">
                            <button class="category-button" data-category="${item.name}" data-index="${index}">
                                <div class="category-icon">${icon}</div>
                                <span class="category-name">${item.name}</span>
                                <span class="category-count">${fileCount}</span>
                                <svg class="category-chevron" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="9 18 15 12 9 6"/>
                                </svg>
                            </button>
                            <div class="category-items" data-category="${item.name}">
                                ${renderCategoryItems(item.children)}
                            </div>
                        </div>
                    `;
                }
            });
            
            navCategories.innerHTML = html;
            
            // Add event listeners
            document.querySelectorAll('.category-button').forEach(button => {
                button.addEventListener('click', function() {
                    const categoryName = this.dataset.category;
                    const items = this.nextElementSibling;
                    
                    // Toggle expansion
                    this.classList.toggle('expanded');
                    items.classList.toggle('expanded');
                    
                    // Set active category
                    document.querySelectorAll('.category-button').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update breadcrumb
                    document.getElementById('breadcrumb-current').textContent = categoryName;
                    
                    // Scroll to category in kanban
                    scrollToKanbanColumn(categoryName);
                });
            });
        }

        function renderCategoryItems(children) {
            let html = '';
            children.forEach(child => {
                if (child.type === 'file') {
                    html += `
                        <div class="category-item" onclick="navigateTo('${child.url}')">
                            ${child.name}
                        </div>
                    `;
                } else if (child.type === 'folder') {
                    html += renderCategoryItems(child.children);
                }
            });
            return html;
        }

        // ==========================================
        // RENDER KANBAN BOARD
        // ==========================================
        function renderKanbanBoard(items, isFiltered = false) {
            const kanbanBoard = document.getElementById('kanban-board');
            
            const columns = [
                { title: 'Getting Started', indicator: 'orange', items: [] },
                { title: 'In Progress', indicator: 'blue', items: [] },
                { title: 'Advanced', indicator: 'green', items: [] }
            ];
            
            // Distribute items across columns
            items.forEach((item, index) => {
                if (item.type === 'folder') {
                    const files = isFiltered ? item.filteredFiles : getAllFiles(item);
                    const columnIndex = index % 3;
                    columns[columnIndex].items.push({
                        category: item.name,
                        files: files
                    });
                }
            });
            
            let html = '';
            
            columns.forEach(column => {
                const totalFiles = column.items.reduce((sum, cat) => sum + cat.files.length, 0);
                
                html += `
                    <div class="kanban-column">
                        <div class="kanban-column-header">
                            <div class="column-title-wrapper">
                                <div class="column-indicator ${column.indicator}"></div>
                                <h3 class="column-title">${column.title}</h3>
                            </div>
                            <span class="column-count">${totalFiles}</span>
                        </div>
                        <div class="kanban-cards">
                            ${renderKanbanCards(column.items)}
                        </div>
                    </div>
                `;
            });
            
            kanbanBoard.innerHTML = html;
        }

        function renderKanbanCards(categories) {
            let html = '';
            
            categories.forEach(category => {
                category.files.forEach(file => {
                    html += `
                        <div class="kanban-card" onclick="navigateTo('${file.url}')">
                            <div class="card-title">${file.name}</div>
                            <div class="card-meta">
                                <div class="card-meta-item">
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"/>
                                    </svg>
                                    ${category.category}
                                </div>
                                <div class="card-meta-item">
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                                        <polyline points="14 2 14 8 20 8"/>
                                    </svg>
                                    Resource
                                </div>
                            </div>
                            <span class="card-tag">${category.category}</span>
                        </div>
                    `;
                });
            });
            
            return html || '<div style="padding: 40px; text-align: center; color: var(--text-muted);">No resources found</div>';
        }

        // ==========================================
        // UTILITY FUNCTIONS
        // ==========================================
        function getAllFiles(item) {
            let files = [];
            if (item.type === 'file') {
                return [item];
            }
            if (item.children) {
                item.children.forEach(child => {
                    files = files.concat(getAllFiles(child));
                });
            }
            return files;
        }

        function countTotalFiles(items) {
            let count = 0;
            items.forEach(item => {
                if (item.type === 'folder') {
                    count += countTotalFiles(item.children);
                } else {
                    count++;
                }
            });
            return count;
        }

        function scrollToKanbanColumn(categoryName) {
            document.querySelector('.kanban-container').scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }

        function navigateTo(url) {
            window.location.href = url;
        }

        function showError() {
            document.getElementById('kanban-board').innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px;">
                    <div style="font-size: 48px; margin-bottom: 16px;">!</div>
                    <h3 style="font-size: 20px; margin-bottom: 8px;">Failed to load resources</h3>
                    <p style="color: var(--text-secondary);">Please refresh the page or try again later</p>
                </div>
            `;
        }

        // ==========================================
        // SMOOTH SCROLL FOR ANCHORS
        // ==========================================
        document.addEventListener('click', (e) => {
            if (e.target.tagName === 'A' && e.target.hash) {
                e.preventDefault();
                const target = document.querySelector(e.target.hash);
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth' });
                }
            }
        });

        // ==========================================
        // INITIALIZE
        // ==========================================
        window.addEventListener('load', () => {
            loadNavigation();
            console.log('Rover Dashboard loaded successfully');
        });

        // Auto-refresh every 60 seconds
        setInterval(loadNavigation, 60000);
            const folderIcons = {
                'Complexity': '⚡',
                'Problem Solving': '🎯',
                'Sliding Window': '🪟',
                'Test': '🧪',
                'Arrays': '📊',
                'Strings': '📝',
                'Trees': '��',
                'Graphs': '🕸️',
                'Dynamic Programming': '💡',
                'Sorting': '🔄',
                'Searching': '🔍'
            };
            
            let html = '';
            
            for (const item of items) {
                if (item.type === 'folder') {
                    const fileCount = countTotalFiles([item]);
                    const icon = folderIcons[item.name] || '📁';
                    html += `
                        <div class="nav-folder">
                            <div class="folder-header" data-folder="${item.name}">
                                <div class="folder-icon-wrapper">
                                    <span class="folder-icon">${icon}</span>
                                </div>
                                <span class="folder-name">${item.name}</span>
                                <span class="folder-count">${fileCount}</span>
                            </div>
                            <div class="nav-files">
                                ${renderNavigation(item.children)}
                            </div>
                        </div>
                    `;
                } else {
                    html += `
                        <div class="nav-file" onclick="navigateTo('${item.url}')">
                            ${item.name}
                        </div>
                    `;
                }
            }
            
            return html;
        }

        function renderCategoryCards(items) {
            const contentBody = document.getElementById('main-content-body');
            let html = '<div class="categories-grid">';
            
            const categoryIcons = {
                'Complexity': '⏱️',
                'Problem Solving': '🧩',
                'Sliding Window': '🪟',
                'Test': '🧪',
                'Arrays': '📊',
                'Strings': '📝',
                'Trees': '🌳',
                'Graphs': '🕸️',
                'Dynamic Programming': '💡',
                'Sorting': '🔄',
                'Searching': '🔍'
            };
            
            for (const item of items) {
                if (item.type === 'folder') {
                    const icon = categoryIcons[item.name] || '📁';
                    const fileCount = countTotalFiles([item]);
                    html += `
                        <div class="category-card" onclick="scrollToFolder('${item.name}')">
                            <span class="category-icon">${icon}</span>
                            <div class="category-name">${item.name}</div>
                            <div class="category-count">
                                <span class="number">${fileCount}</span> resources
                            </div>
                        </div>
                    `;
                }
            }
            
            html += '</div>';
            contentBody.innerHTML = html;
        }

        function countTotalFiles(items) {
            let count = 0;
            for (const item of items) {
                if (item.type === 'folder') {
                    count += countTotalFiles(item.children);
                } else {
                    count++;
                }
            }
            return count;
        }

        function addFolderToggles() {
            const folderHeaders = document.querySelectorAll('.folder-header');
            folderHeaders.forEach(header => {
                header.addEventListener('click', function() {
                    this.classList.toggle('collapsed');
                    const navFiles = this.nextElementSibling;
                    navFiles.classList.toggle('hidden');
                });
            });
        }

        function scrollToFolder(folderName) {
            const folderHeader = document.querySelector(`[data-folder="${folderName}"]`);
            if (folderHeader) {
                folderHeader.scrollIntoView({ behavior: 'smooth', block: 'center' });
                folderHeader.classList.remove('collapsed');
                folderHeader.nextElementSibling.classList.remove('hidden');
                
                // Add highlight effect
                folderHeader.style.background = 'rgba(255, 128, 0, 0.2)';
                setTimeout(() => {
                    folderHeader.style.background = '';
                }, 1000);
            }
        }

        function navigateTo(url) {
            window.location.href = url;
        }

        // Load navigation on page load
        loadNavigation();

        // Auto-refresh navigation every 60 seconds
        setInterval(loadNavigation, 60000);
    </script>
</body>
</html>
